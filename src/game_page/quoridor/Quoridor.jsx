/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState, useEffect, Suspense } from "react";
import { useGLTF, CameraControls, Environment } from "@react-three/drei";
import { a } from '@react-spring/three';
import { Canvas } from "@react-three/fiber";
import { AnimatePresence, motion } from "framer-motion";
import * as THREE from 'three';

import quoridorScene from './quoridor.glb';
import Player from "./Player";
import Grid from "./Grid";
import Wall from "./Wall";
import { Navbar, Notification, ColorPalette, GameMenu, Loader, useBoardTransform } from "../index";
import styles from "../../styles/styles";
import { gameMenu } from "../../constants";
import { simpleInOut } from "../../styles/motion";

const Quoridor = (props) => {
    const { nodes, materials } = useGLTF(quoridorScene);
    const [boardScale, boardPosition, boardRotation] = useBoardTransform();

    // Color states
    const [selectedPalette, setSelectedPalette] = useState(1);
    const palettes = [
        {
            preset: "dawn",
            from: "from-purple-400",
            to: "to-purple-100",
            colors: [new THREE.Color( "#FFFFFF" ), new THREE.Color( "#8361FF" ), new THREE.Color( "#7D5DB1" )],
        },
        {
            preset: "apartment",
            from: "from-amber-700",
            to: "to-orange-200",
            colors: [new THREE.Color( "#422006" ), new THREE.Color( "#fed7aa" ), new THREE.Color( "#fef08a" )],
        },
        {
            preset: "park",
            from: "from-emerald-700",
            to: "to-emerald-200",
            colors: [new THREE.Color( "#052e16" ), new THREE.Color( "#a7f3d0" ), new THREE.Color( "#065f46" )],
        },
    ];
    materials.Wood_procedural_p1.color = new THREE.Color( "#991b1b" );
    materials.Wood_procedural_p2.color = new THREE.Color( "#ca8a04" );
    materials.Wood_procedural_table.color = palettes[selectedPalette].colors[0];
    materials.Smooth.color = palettes[selectedPalette].colors[1];
    materials.Wood_procedural_wall.color = palettes[selectedPalette].colors[2]; 

    // Game states
    const [isHelperVisible, setHelperVisible] = useState(false);
    const [step, setStep] = useState(0);
    const [playerTurn, setPlayerTurn] = useState(1);


    // Helpter functions
    useEffect(() => {
        // This useEffect function will set 'navigate' image to hidden after user managed to click and hold to rotate canvas
        function handleCanvasTouch() {
            setHelperVisible(false);
        }
        
        // mousedown event for PC
        window.addEventListener('mousedown', handleCanvasTouch);
        // touchmove event for mobile
        window.addEventListener('touchmove', handleCanvasTouch);
    
        return () => {
            window.removeEventListener('mousedown', handleCanvasTouch);
            window.removeEventListener('touchmove', handleCanvasTouch);
        };
    }, []);
    function startGame() { 
        setStep(1);
        setHelperVisible(true);
    }

    return (
        <section className="w-full h-screen">
            <Navbar bg={false} home={false}/>
            <section className="w-full h-screen">
                {/* Game's menu */}
                {
                    step === 0 && <GameMenu data={gameMenu["quoridor"]} startGame={startGame}/>
                }
                {/* Helper image */}
                {
                    <AnimatePresence>
                        {isHelperVisible && <motion.img 
                            src="/navigate.svg" 
                            alt="navigate"
                            draggable="false" 
                            className="w-52 h-52 rounded-full fixed m-auto inset-x-0 inset-y-0 z-10 pointer-events-none"
                            initial="hidden"
                            whileInView="show"
                            exit="hidden"
                            variants={simpleInOut("tween", 0.2, 0.5)}
                        />}
                    </AnimatePresence>
                }
                {/* Footer */}
                <div className={`${styles.xPaddings} w-full fixed bottom-0 pb-8 z-10 pointer-events-none`}>
                    <div className={`${styles.innerWidth} mx-auto grid grid-cols-1 md:grid-cols-4 gap-4`}>
                        <div className="flex flex-row gap-2">
                            {palettes.map((data, i) => {
                                return <ColorPalette data={data} index={i} handleClick={(i) => setSelectedPalette(i)} selected={selectedPalette}/>
                            })}
                        </div>
                        <div className="col-span-2 justify-self-center">
                            {
                                step !== 0 &&
                                <Notification text={(
                                    step === 1 ? (`Player ${playerTurn}'s turn: Pick a piece for your opponent to play.`) : ("")
                                )}/>
                            }
                        </div>
                    </div>
                </div>
                {/* Game scene */}
                <Canvas className="w-full h-screen bg-transparent relative">
                    <Suspense fallback={step !== 0 && <Loader />}>
                        <CameraControls
                            minDistance={3} maxDistance={10}
                            minPolarAngle={0} maxPolarAngle={1.5}
                        />
                        <directionalLight position={[-1, 2, -3]} intensity={1} />
                        <ambientLight intensity={2} />
                        <a.group {...props} 
                            scale={boardScale}
                            position={boardPosition}
                            rotation={boardRotation}
                        >
                            <mesh
                                castShadow
                                receiveShadow
                                geometry={nodes.Board.geometry}
                                material={materials.Wood_procedural_table}
                            />
                            <Wall nodes={nodes} materials={materials} />
                            <Player nodes={nodes} materials={materials} />
                            <Grid nodes={nodes} materials={materials} />
                        </a.group>
                        <Environment preset={palettes[selectedPalette].preset} background blur={1} />
                    </Suspense>
                </Canvas>
            </section>
        </section>
    );
}

export default Quoridor;